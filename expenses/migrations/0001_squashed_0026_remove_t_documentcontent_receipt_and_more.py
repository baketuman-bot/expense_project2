# Generated by Django 5.2.6 on 2025-10-24 13:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import expenses.models
from django.conf import settings
from django.db import migrations, models

# --- Inlined helper functions (ported from 0007 and 0014) ---
def disable_fk_checks(apps, schema_editor):
    vendor = schema_editor.connection.vendor
    if vendor == 'mysql':
        with schema_editor.connection.cursor() as cursor:
            cursor.execute('SET FOREIGN_KEY_CHECKS=0;')


def enable_fk_checks(apps, schema_editor):
    vendor = schema_editor.connection.vendor
    if vendor == 'mysql':
        with schema_editor.connection.cursor() as cursor:
            cursor.execute('SET FOREIGN_KEY_CHECKS=1;')


def rename_tables_if_needed(apps, schema_editor):
    """Rename base tables from 'expenses_*' to target names if needed."""
    conn = schema_editor.connection
    vendor = conn.vendor
    tables = set(conn.introspection.table_names())
    mappings = [
        ('expenses_m_account', 'm_account'),
        ('expenses_m_bumon', 'm_bumon'),
        ('expenses_m_post', 'm_post'),
        ('expenses_m_status', 'm_status'),
        ('expenses_m_user', 'm_user'),
        ('expenses_t_expensemain', 't_expense_main'),
        ('expenses_t_expensedetail', 't_expense_detail'),
        ('expenses_t_approvallog', 't_approval_log'),
    ]
    with conn.cursor() as cursor:
        for old, new in mappings:
            if old in tables and new not in tables:
                if vendor == 'mysql':
                    cursor.execute(f"RENAME TABLE `{old}` TO `{new}`;")
                else:
                    cursor.execute(f"ALTER TABLE {old} RENAME TO {new};")


def reorder_columns_mysql(apps, schema_editor):
    # Only applicable to MySQL; no-op on others
    if schema_editor.connection.vendor != 'mysql':
        return
    with schema_editor.connection.cursor() as cursor:
        stmts = [
            "ALTER TABLE `m_workflow_steps` MODIFY COLUMN `workflow_template_id` int NOT NULL FIRST",
            "ALTER TABLE `m_workflow_steps` MODIFY COLUMN `step_id` int NOT NULL AUTO_INCREMENT AFTER `workflow_template_id`",
            "ALTER TABLE `m_workflow_steps` MODIFY COLUMN `step_order` int NOT NULL AFTER `step_id`",
            "ALTER TABLE `m_workflow_steps` MODIFY COLUMN `step_type` varchar(13) NOT NULL AFTER `step_order`",
            "ALTER TABLE `m_workflow_steps` MODIFY COLUMN `condition_expr` varchar(255) NULL AFTER `step_type`",
            "ALTER TABLE `m_workflow_steps` MODIFY COLUMN `approver_post_cd` varchar(15) NULL AFTER `condition_expr`",
            "ALTER TABLE `m_workflow_steps` MODIFY COLUMN `allowed_post_cd` varchar(15) NULL AFTER `approver_post_cd`",
            "ALTER TABLE `m_workflow_steps` MODIFY COLUMN `allowed_bumon_scope` varchar(7) NOT NULL AFTER `allowed_post_cd`",
            "ALTER TABLE `m_workflow_steps` MODIFY COLUMN `group_id` int NULL AFTER `allowed_bumon_scope`",
        ]
        for sql in stmts:
            cursor.execute(sql)


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# expenses.migrations.0007_alter_table_names
# expenses.migrations.0014_reorder_columns_m_workflow_steps

class Migration(migrations.Migration):

    replaces = [('expenses', '0001_initial'), ('expenses', '0002_t_expensemain_bumon_cd'), ('expenses', '0003_t_expensemain_memo'), ('expenses', '0004_t_expensedetail_tekikakusha_cd'), ('expenses', '0005_t_expensemain_pay_kbn_m_item'), ('expenses', '0006_alter_m_item_content_alter_m_item_content2'), ('expenses', '0007_alter_table_names'), ('expenses', '0008_m_workflowtemplate_alter_m_user_options_and_more'), ('expenses', '0009_v_user'), ('expenses', '0010_alter_t_workflowinstance_options'), ('expenses', '0011_alter_t_workflowinstance_options'), ('expenses', '0012_t_documentapprover_alter_t_workflowinstance_table'), ('expenses', '0013_alter_t_documentapprover_document_id_and_more'), ('expenses', '0014_reorder_columns_m_workflow_steps'), ('expenses', '0015_alter_m_workflowstep_allowed_bumon_scope'), ('expenses', '0016_m_post_post_order'), ('expenses', '0017_t_document'), ('expenses', '0018_t_documentcontent'), ('expenses', '0019_replace_fk_to_document'), ('expenses', '0020_alter_t_documentcontent_receipt_and_more'), ('expenses', '0021_t_workflowinstance_step_and_more'), ('expenses', '0022_remove_t_expensemain_applicant_and_more'), ('expenses', '0023_remove_t_workflowaction_action_and_more'), ('expenses', '0024_delete_t_approvallog'), ('expenses', '0025_t_documentattachment'), ('expenses', '0026_remove_t_documentcontent_receipt_and_more')]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='V_Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_cd', models.CharField(max_length=20, verbose_name='部署コード')),
                ('relation_group_cd', models.CharField(max_length=20, verbose_name='関連部署コード')),
            ],
            options={
                'verbose_name': '組織関係ビュー',
                'verbose_name_plural': '組織関係ビュー',
                'db_table': 'v_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='M_Account',
            fields=[
                ('account_cd', models.CharField(default='DEFAULT', max_length=20, primary_key=True, serialize=False, verbose_name='勘定科目コード')),
                ('account_name', models.CharField(max_length=100, verbose_name='勘定科目名')),
            ],
            options={
                'db_table': 'm_account',
            },
        ),
        migrations.CreateModel(
            name='M_Bumon',
            fields=[
                ('bumon_cd', models.CharField(default='DEFAULT', max_length=15, primary_key=True, serialize=False, verbose_name='部門コード')),
                ('bumon_name', models.CharField(max_length=100, verbose_name='部門名')),
            ],
            options={
                'db_table': 'm_bumon',
            },
        ),
        migrations.CreateModel(
            name='M_Group',
            fields=[
                ('group_cd', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='部署コード')),
                ('group_name', models.CharField(max_length=50, verbose_name='部署名')),
                ('upper_group_cd', models.CharField(blank=True, max_length=20, null=True, verbose_name='上位部署コード')),
            ],
            options={
                'verbose_name': '所属部署マスタ',
                'verbose_name_plural': '所属部署マスタ',
                'db_table': 'm_group',
            },
        ),
        migrations.CreateModel(
            name='M_Post',
            fields=[
                ('post_cd', models.CharField(default='DEFAULT', max_length=15, primary_key=True, serialize=False, verbose_name='役職コード')),
                ('post_name', models.CharField(max_length=100, verbose_name='役職名')),
            ],
            options={
                'db_table': 'm_post',
            },
        ),
        migrations.CreateModel(
            name='M_Status',
            fields=[
                ('status_cd', models.CharField(default='DEFAULT', max_length=20, primary_key=True, serialize=False, verbose_name='ステータスコード')),
                ('status_name', models.CharField(max_length=50, verbose_name='ステータス名')),
            ],
            options={
                'db_table': 'm_status',
            },
        ),
        migrations.CreateModel(
            name='M_User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('man_number', models.CharField(max_length=20, unique=True, verbose_name='社員番号')),
                ('user_name', models.CharField(max_length=30, verbose_name='氏名')),
                ('role', models.CharField(choices=[('employee', '従業員'), ('approver', '承認者'), ('accountant', '経理担当者'), ('final_approver', '経理承認者')], default='employee', max_length=20, verbose_name='権限')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('bumon_cd', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='expenses.m_bumon', verbose_name='部門')),
                ('post_cd', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='expenses.m_post', verbose_name='役職')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'db_table': 'm_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='M_BelongTo',
            fields=[
                ('belong_id', models.AutoField(primary_key=True, serialize=False, verbose_name='所属ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('man_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='belongs', to=settings.AUTH_USER_MODEL, to_field='man_number', verbose_name='社員')),
                ('group_cd', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='expenses.m_group', verbose_name='所属部署')),
            ],
            options={
                'verbose_name': '所属部署マッピング',
                'verbose_name_plural': '所属部署マッピング',
                'db_table': 'm_belong_to',
                'ordering': ['man_number', 'group_cd'],
                'unique_together': {('man_number', 'group_cd')},
            },
        ),
        migrations.CreateModel(
            name='M_Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_kbn', models.CharField(max_length=4, verbose_name='データ区分')),
                ('key', models.CharField(max_length=4, verbose_name='キー')),
                ('content', models.CharField(blank=True, max_length=50, verbose_name='内容')),
                ('content2', models.CharField(max_length=50, verbose_name='内容2')),
            ],
            options={
                'verbose_name': '汎用項目マスタ',
                'verbose_name_plural': '汎用項目マスタ',
                'db_table': 'm_item',
                'constraints': [models.UniqueConstraint(fields=('data_kbn', 'key'), name='uq_m_item_data_kbn_key')],
            },
        ),
        migrations.CreateModel(
            name='M_WorkflowTemplate',
            fields=[
                ('workflow_template_id', models.AutoField(db_column='workflow_template_id', primary_key=True, serialize=False, verbose_name='ワークフローテンプレートID')),
                ('workflow_template_name', models.CharField(max_length=100, verbose_name='ワークフローテンプレート名')),
                ('description', models.TextField(blank=True, null=True, verbose_name='説明')),
            ],
            options={
                'verbose_name': 'ワークフローテンプレートマスタ',
                'verbose_name_plural': 'ワークフローテンプレートマスタ',
                'db_table': 'm_workflow_templates',
            },
        ),
        migrations.AlterModelOptions(
            name='m_user',
            options={},
        ),
        migrations.AlterField(
            model_name='m_item',
            name='data_kbn',
            field=models.CharField(blank=True, max_length=4, verbose_name='データ区分'),
        ),
        migrations.AlterField(
            model_name='m_item',
            name='key',
            field=models.CharField(blank=True, max_length=4, verbose_name='キー'),
        ),
        migrations.CreateModel(
            name='M_WorkflowStep',
            fields=[
                ('step_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ステップID')),
                ('step_order', models.IntegerField(verbose_name='順序')),
                ('step_type', models.CharField(choices=[('approval', '承認'), ('reception', '受付'), ('confirmation', '確認')], default='approval', max_length=13, verbose_name='ステップ種別')),
                ('condition_expr', models.CharField(blank=True, max_length=255, null=True, verbose_name='条件式')),
                ('group_id', models.IntegerField(blank=True, null=True, verbose_name='グループID')),
                ('allowed_bumon_scope', models.CharField(choices=[('same', '同一'), ('parent', '親'), ('any', '全体')], default='any', max_length=7, verbose_name='部門許可範囲')),
                ('allowed_post', models.ForeignKey(blank=True, db_column='allowed_post_cd', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='allowed_workflow_steps', to='expenses.m_post', verbose_name='許可役職')),
                ('approver_post', models.ForeignKey(blank=True, db_column='approver_post_cd', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approver_workflow_steps', to='expenses.m_post', verbose_name='承認者役職')),
                ('workflow_template', models.ForeignKey(db_column='workflow_template_id', on_delete=django.db.models.deletion.PROTECT, related_name='steps', to='expenses.m_workflowtemplate', verbose_name='ワークフローテンプレート')),
            ],
            options={
                'verbose_name': 'ワークフローステップマスタ',
                'verbose_name_plural': 'ワークフローステップマスタ',
                'db_table': 'm_workflow_steps',
                'ordering': ['workflow_template', 'step_order'],
            },
        ),
        migrations.CreateModel(
            name='M_DocumentType',
            fields=[
                ('document_type_id', models.AutoField(db_column='document_type_id', primary_key=True, serialize=False, verbose_name='文書種別ID')),
                ('document_type_name', models.CharField(max_length=100, verbose_name='文書種別名')),
                ('description', models.TextField(blank=True, null=True, verbose_name='説明')),
                ('workflow_template_id', models.ForeignKey(blank=True, db_column='workflow_template_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='expenses.m_workflowtemplate', verbose_name='ワークフローテンプレート')),
            ],
            options={
                'verbose_name': '文書種別マスタ',
                'verbose_name_plural': '文書種別マスタ',
                'db_table': 'm_document_types',
            },
        ),
        migrations.CreateModel(
            name='T_WorkflowInstance',
            fields=[
                ('instance_id', models.AutoField(primary_key=True, serialize=False, verbose_name='インスタンスID')),
                ('document_id', models.IntegerField(db_index=True, verbose_name='文書ID')),
                ('status', models.CharField(choices=[('in_progress', '進行中'), ('completed', '完了'), ('rejected', '却下'), ('returned', '差戻し')], default='in_progress', max_length=12, verbose_name='ステータス')),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='開始日時')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完了日時')),
                ('workflow_template', models.ForeignKey(db_column='workflow_template_id', on_delete=django.db.models.deletion.PROTECT, related_name='instances', to='expenses.m_workflowtemplate', verbose_name='ワークフローテンプレート')),
            ],
            options={
                'verbose_name': 'ワークフローインスタンス',
                'verbose_name_plural': 'ワークフローインスタンス',
                'db_table': 't_workflow_instances',
            },
        ),
        migrations.CreateModel(
            name='T_WorkflowAction',
            fields=[
                ('action_id', models.AutoField(primary_key=True, serialize=False, verbose_name='アクションID')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='コメント')),
                ('actioned_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='処理日時')),
                ('approver_man_number', models.ForeignKey(db_column='approver_man_number', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, to_field='man_number', verbose_name='承認者社員番号')),
                ('step', models.ForeignKey(db_column='step_id', on_delete=django.db.models.deletion.PROTECT, related_name='actions', to='expenses.m_workflowstep', verbose_name='対象ステップ')),
                ('instance', models.ForeignKey(db_column='instance_id', on_delete=django.db.models.deletion.PROTECT, related_name='actions', to='expenses.t_workflowinstance', verbose_name='ワークフローインスタンス')),
                ('action_status', models.ForeignKey(blank=True, db_column='action', db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='expenses.m_status', verbose_name='操作')),
            ],
            options={
                'verbose_name': 'ワークフローアクション',
                'verbose_name_plural': 'ワークフローアクション',
                'db_table': 't_workflow_actions',
                'ordering': ['-actioned_at'],
            },
        ),
        migrations.CreateModel(
            name='V_User',
            fields=[
                ('man_number', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='社員番号')),
                ('user_name', models.CharField(max_length=30, verbose_name='氏名')),
                ('group_cd', models.CharField(blank=True, max_length=20, null=True, verbose_name='部署コード')),
                ('group_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='部署名')),
                ('bumon_cd', models.CharField(blank=True, max_length=15, null=True, verbose_name='部門コード')),
                ('bumon_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='部門名')),
                ('post_cd', models.CharField(blank=True, max_length=15, null=True, verbose_name='役職コード')),
                ('post_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='役職名')),
            ],
            options={
                'verbose_name': 'ユーザビュー',
                'verbose_name_plural': 'ユーザビュー',
                'db_table': 'v_user',
                'managed': False,
            },
        ),
        # 既に作成時から 't_workflow_instances' なのでテーブル名変更は不要
        migrations.RunPython(
            code=reorder_columns_mysql,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='m_workflowstep',
            name='allowed_bumon_scope',
            field=models.CharField(choices=[('same', '同一'), ('parent', '親'), ('keiri', '経理'), ('any', '全体')], default='any', max_length=7, verbose_name='部門許可範囲'),
        ),
        migrations.AddField(
            model_name='m_post',
            name='post_order',
            field=models.IntegerField(default=0, help_text='小さいほど上位の扱い', verbose_name='職位順'),
        ),
        migrations.CreateModel(
            name='T_Document',
            fields=[
                ('document_id', models.AutoField(db_column='document_id', primary_key=True, serialize=False, verbose_name='文書ID')),
                ('title', models.CharField(max_length=255, verbose_name='タイトル')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='メモ')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('document_type', models.ForeignKey(db_column='document_type_id', on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='expenses.m_documenttype', verbose_name='文書種別')),
                ('man_number', models.ForeignKey(db_column='man_number', on_delete=django.db.models.deletion.PROTECT, related_name='documents', to=settings.AUTH_USER_MODEL, to_field='man_number', verbose_name='申請者')),
                ('bumon_cd', models.ForeignKey(blank=True, db_column='bumon_cd', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='expenses.m_bumon', verbose_name='部門')),
                ('status_cd', models.ForeignKey(db_column='status_cd_id', on_delete=django.db.models.deletion.PROTECT, to='expenses.m_status', verbose_name='ステータス')),
            ],
            options={
                'verbose_name': '文書',
                'verbose_name_plural': '文書',
                'db_table': 't_documents',
            },
        ),
        migrations.CreateModel(
            name='T_DocumentContent',
            fields=[
                ('document_detail_id', models.AutoField(db_column='document_detail_id', primary_key=True, serialize=False, verbose_name='明細ID')),
                ('date', models.DateField(blank=True, null=True, verbose_name='日付')),
                ('tekikaku_cd', models.CharField(blank=True, max_length=15, null=True, verbose_name='登録番号')),
                ('shiharaisaki', models.CharField(blank=True, max_length=255, null=True, verbose_name='支払先')),
                ('purpose', models.CharField(blank=True, max_length=255, null=True, verbose_name='目的')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='金額')),
                ('receipt', models.FileField(blank=True, null=True, upload_to='receipts/documents/%Y/%m/%d/', verbose_name='領収書')),
                ('receipt_thumbnail', models.ImageField(blank=True, null=True, upload_to='receipts/documents/%Y/%m/%d/thumbnails/', verbose_name='サムネイル')),
                ('content', models.JSONField(blank=True, null=True, verbose_name='内容JSON')),
                ('account', models.ForeignKey(blank=True, db_column='account_id', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='document_contents', to='expenses.m_account', verbose_name='勘定科目')),
                ('document', models.ForeignKey(db_column='document_id', on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='expenses.t_document', verbose_name='文書')),
            ],
            options={
                'verbose_name': '文書明細',
                'verbose_name_plural': '文書明細',
                'db_table': 't_documentcontents',
            },
        ),
        migrations.CreateModel(
            name='T_DocumentApprover',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('document_id', models.ForeignKey(db_column='document_id', db_constraint=False, on_delete=django.db.models.deletion.PROTECT, related_name='document_approvers', to='expenses.t_document', verbose_name='文書')),
                ('step_id', models.ForeignKey(db_column='step_id', db_constraint=False, on_delete=django.db.models.deletion.PROTECT, related_name='document_approvers', to='expenses.m_workflowstep', verbose_name='ステップ')),
                ('man_number', models.ForeignKey(db_column='man_number', db_constraint=False, on_delete=django.db.models.deletion.PROTECT, related_name='document_approvals', to=settings.AUTH_USER_MODEL, to_field='man_number', verbose_name='承認者')),
                ('step_order', models.IntegerField(verbose_name='ステップ順')),
                ('status', models.CharField(default='pending', max_length=20, verbose_name='ステータス')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='承認日時')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='備考')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
            ],
            options={
                'verbose_name': '文書承認者',
                'verbose_name_plural': '文書承認者',
                'db_table': 't_document_approvers',
            },
        ),
        migrations.AlterField(
            model_name='t_workflowinstance',
            name='document_id',
            field=models.ForeignKey(db_column='document_id', db_constraint=False, on_delete=django.db.models.deletion.PROTECT, related_name='workflow_instances', to='expenses.t_document', verbose_name='文書'),
        ),
        migrations.AlterField(
            model_name='t_documentapprover',
            name='document_id',
            field=models.ForeignKey(db_column='document_id', db_constraint=False, on_delete=django.db.models.deletion.PROTECT, related_name='document_approvers', to='expenses.t_document', verbose_name='文書'),
        ),
        migrations.AlterField(
            model_name='t_documentcontent',
            name='receipt',
            field=models.FileField(blank=True, null=True, upload_to=expenses.models.document_receipt_upload_path, verbose_name='領収書'),
        ),
        migrations.AlterField(
            model_name='t_documentcontent',
            name='receipt_thumbnail',
            field=models.ImageField(blank=True, null=True, upload_to=expenses.models.document_thumbnail_upload_path, verbose_name='サムネイル'),
        ),
        migrations.AddField(
            model_name='t_workflowinstance',
            name='step',
            field=models.ForeignKey(blank=True, db_column='step_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='workflow_instances_current', to='expenses.m_workflowstep', verbose_name='現在ステップ'),
        ),
        migrations.AddField(
            model_name='t_workflowinstance',
            name='step_order',
            field=models.IntegerField(blank=True, db_column='step_order', null=True, verbose_name='現在ステップ順'),
        ),
        # 最終スキーマ: m_status に action_name を持たせる
        migrations.AddField(
            model_name='m_status',
            name='action_name',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='アクション名'),
        ),
        migrations.CreateModel(
            name='T_DocumentAttachment',
            fields=[
                ('attachment_id', models.AutoField(db_column='attachment_id', primary_key=True, serialize=False, verbose_name='添付ID')),
                ('file', models.FileField(upload_to=expenses.models.attachment_upload_path, verbose_name='添付ファイル')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to=expenses.models.attachment_thumbnail_upload_path, verbose_name='サムネイル')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='登録日時')),
                ('detail', models.ForeignKey(db_column='document_detail_id', on_delete=django.db.models.deletion.PROTECT, related_name='attachments', to='expenses.t_documentcontent', verbose_name='明細')),
            ],
            options={
                'verbose_name': '文書添付',
                'verbose_name_plural': '文書添付',
                'db_table': 't_document_attachments',
            },
        ),
        migrations.RemoveField(
            model_name='t_documentcontent',
            name='receipt',
        ),
        migrations.RemoveField(
            model_name='t_documentcontent',
            name='receipt_thumbnail',
        ),
    ]
